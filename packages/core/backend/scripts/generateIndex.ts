// This script generates the src/index.ts file which exports all enums, errors,
// ids, types, and the Api interface. The script runs before the tsc build.

import { readdirSync, writeFileSync } from "node:fs";

const Category = {
  Enum: "ENUM",
  Error: "ERROR",
  Id: "ID",
  Type: "TYPE",
} as const;
type CategoryValue = (typeof Category)[keyof typeof Category];

function toDirectory(category: CategoryValue): string {
  switch (category) {
    case Category.Enum:
      return "enums";
    case Category.Error:
      return "errors";
    case Category.Id:
      return "ids";
    case Category.Type:
      return "types";
  }
}

function toComment(category: CategoryValue): string {
  switch (category) {
    case Category.Enum:
      return "// Enums";
    case Category.Error:
      return "// Errors";
    case Category.Id:
      return "// Ids";
    case Category.Type:
      return "// Types";
  }
}

function getFileNames(category: CategoryValue): string[] {
  try {
    return readdirSync(`./src/${toDirectory(category)}`);
  } catch (error: unknown) {
    if (
      typeof error === "object" &&
      error !== null &&
      "code" in error &&
      error.code === "ENOENT"
    ) {
      return [];
    }
    throw error;
  }
}

function toExports(category: CategoryValue, fileNames: string[]): string[] {
  return [
    toComment(category),
    ...fileNames
      .filter(
        (fileName) =>
          fileName.endsWith(".ts") && !fileName.endsWith(".test.ts"),
      )
      .sort()
      .map((fileName) => {
        const name = fileName.replace(".ts", "");
        const dir = toDirectory(category);
        const isType = category !== Category.Enum ? "type " : "";
        return `export ${isType}{ default as ${name} } from "./${dir}/${name}.js";`;
      }),
  ];
}

function generateIndex(): string {
  return [
    "// File automatically generated by the `generate-index` script. Don't edit it",
    "// manually, instead run `yarn workspace @superego/backend generate-index`.",
    "// Backend",
    'export type { default as Backend } from "./Backend.js";',
    ...toExports(Category.Enum, getFileNames(Category.Enum)),
    ...toExports(Category.Error, getFileNames(Category.Error)),
    ...toExports(Category.Id, getFileNames(Category.Id)),
    ...toExports(Category.Type, getFileNames(Category.Type)),
    "",
  ].join("\n");
}

function main() {
  const indexFile = "./src/index.ts";
  const generatedIndex = generateIndex();
  writeFileSync(indexFile, generatedIndex);
}
main();
